<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Hugo tranquilpeak theme</title>
    <link>https://delta5738.github.io/post/</link>
    <description>Recent content in Posts on Hugo tranquilpeak theme</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 08 Oct 2022 01:03:39 +0900</lastBuildDate><atom:link href="https://delta5738.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>JS函数的执行时机</title>
      <link>https://delta5738.github.io/post/js%E5%87%BD%E6%95%B0%E7%9A%84%E6%89%A7%E8%A1%8C%E6%97%B6%E6%9C%BA/</link>
      <pubDate>Sat, 08 Oct 2022 01:03:39 +0900</pubDate>
      
      <guid>https://delta5738.github.io/post/js%E5%87%BD%E6%95%B0%E7%9A%84%E6%89%A7%E8%A1%8C%E6%97%B6%E6%9C%BA/</guid>
      <description>JS函数的执行时机 let i = 0 for(i = 0; i&amp;lt;6; i++){ setTimeout(()=&amp;gt;{ console.log(i) },0) } 当有setTimeout()存在的时候,会在for循环执行完毕之后才打印出6个i,所以会出现6个6 for(let i = 0; i&amp;lt;6; i++){ setTimeout(()=&amp;gt;{ console.log(i) },0) } 但是把let i = 0放到for循环当中时,则可以打印出 0、1、2、3、4、5 当let在for循环中时,let为循环的每次迭代获取一个新的绑定。这意味着每个闭包都会捕获一个不同的i实例,所以就算for循环执行完毕,i依旧会有6个不同的值 </description>
    </item>
    
    <item>
      <title>JS 对象基本用法</title>
      <link>https://delta5738.github.io/post/js%E5%AF%B9%E8%B1%A1%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/</link>
      <pubDate>Thu, 08 Sep 2022 01:03:39 +0900</pubDate>
      
      <guid>https://delta5738.github.io/post/js%E5%AF%B9%E8%B1%A1%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/</guid>
      <description>对象基本概念 JavaScript 的设计是一个简单的基于对象的范式。一个对象就是一系列属性的集合，一个属性包含一个名和一个值。一个属性的值可以是函数，这种情况下属性也被称为方法。 对象就是一组&amp;quot;键值对&amp;quot;（key-value）,是一种无序的复合数据集合 对象的每一个键名又称为“属性”（property），它的“键值”可以是任何数据类型。 键名是字符串，不是标识符，可以包含任意字符 引号可以省略，省略之后就只能写标识符，就算引号省略，键名也还是字符串 可以通过 Object.keys(obj)得到所有 obj 的所有 key 如果键名不符合标识名的条件（比如第一个字符为数字，或者含有空格或运算符），且也不是数字，则必须加上引号，否则会报错。 对象中未赋值的属性的值为undefined（而不是null） 声明对象的两种语法 简单写法: let obj={ &amp;#39;name&amp;#39;:&amp;#39;frank&amp;#39;,&amp;#39;age&amp;#39;:18 } 正规写法： let obj = new Object({ name: &amp;#34;frank&amp;#34;, }); 如何删除对象的属性 可以用 delete 操作符删除一个不是继承而来的属性。下面的例子说明如何删除一个属性： //Creates a new object, myobj, with two properties, a and b. var myobj = new Object; myobj.a = 5; myobj.b = 12; //Removes the a property, leaving myobj with only the b property. delete myobj.a; 如果一个全局变量不是用 var 关键字声明的话，你也可以用 delete 删除它 如何查看对象的属性 for&amp;hellip;in 循环 该方法依次访问一个对象及其原型链中所有可枚举的属性。 Object.</description>
    </item>
    
    <item>
      <title>JavaScript的语法(一)</title>
      <link>https://delta5738.github.io/post/js%E8%AF%AD%E6%B3%951/</link>
      <pubDate>Thu, 25 Aug 2022 21:03:39 +0900</pubDate>
      
      <guid>https://delta5738.github.io/post/js%E8%AF%AD%E6%B3%951/</guid>
      <description>JS的表达式和语句 JavaScript 中表达式和语句的主要区别在于一条语句执行一个动作，一个表达式产生一个值。 一个表达式执行后一定会生成一个值，而语句不一定会产生值。 语句主要是用来执行动作，程序就是由一系列语句组成。 JS的标识符 代码中用来标识变量、函数、或属性的字符序列。 在JavaScript中，标识符只能包含字母或数字或下划线（“_”）或美元符号（“$”），且不能以数字开头。标识符与字符串不同之处在于字符串是数据，而标识符是代码的一部分。在 JavaScript 中，无法将标识符转换为字符串，但有时可以将字符串解析为标识符。 JS的if else 语句 if/else 语句在指定的条件为 true 时，执行代码块。如果条件为 false，会执行另外一个代码块。
if/else 语句是 JavaScript 条件语句的一部分, 条件语句用于基于不同的条件来执行不同的动作。
if 语句 - 只有当指定条件为 true 时，使用该语句来执行代码。
else 语句 如果 if 语句的条件为false，则执行该代码块
else if 语句 - 检测一个新的条件，如果第一个条件为false
JS的while for 语句 while 语句可以在某个条件表达式为真的前提下，循环执行指定的一段代码，直到那个表达式不为真时结束循环。 例子: let n = 0; while (n &amp;lt; 3) { n++; } console.log(n); // expected output: 3 JS的break continue continue: continue 声明终止当前循环或标记循环的当前迭代中的语句执行，并在下一次迭代时继续执行循环。 例子: let text = &amp;#39;&amp;#39;; for (let i = 0; i &amp;lt; 10; i++) { if (i === 3) { continue; } text = text + i; } console.</description>
    </item>
    
    <item>
      <title>JavaScript的诞生</title>
      <link>https://delta5738.github.io/post/javascript%E7%9A%84%E8%AF%9E%E7%94%9F/</link>
      <pubDate>Mon, 15 Aug 2022 21:03:39 +0900</pubDate>
      
      <guid>https://delta5738.github.io/post/javascript%E7%9A%84%E8%AF%9E%E7%94%9F/</guid>
      <description>JavaScript的历史 1.肇始于网景 1993年，国家超级电脑应用中心（NCSA）发表了NCSA Mosaic，这是最早流行的图形接口网页浏览器，它在万维网的普及上发挥了重要作用。1994年，Mosaic的主要开发人员随即创立了Netscape公司，并雇用了许多原来的NCSA Mosaic开发者用来开发Netscape Navigator，该公司的目标是取代NCSA Mosaic成为世界第一的网页浏览器。在四个月内，已经占据了四分之三的浏览器市场，并成为1990年代互联网的主要浏览器。网景预见到网络需要变得更动态。公司的创始人马克·安德森认为HTML需要一种胶水语言，让网页设计师和兼职程序员可以很容易地使用它来组装图片和插件之类的组件，且代码可以直接编写在网页标记中。
1995年，网景招募了布兰登·艾克，目标是把Scheme语言嵌入到Netscape Navigator浏览器当中。但更早之前，网景已经跟昇阳合作在Netscape Navigator中支持Java，这时网景内部产生激烈的争论。后来网景决定发明一种与Java搭配使用的辅助脚本语言并且语法上有些类似，这个决策导致排除了采用现有的语言，例如Perl、Python、Tcl或Scheme。为了在其他竞争提案中捍卫JavaScript这个想法，公司需要有一个可以运作的原型。艾克在1995年5月仅花了十天时间就把原型设计出来了。
最初命名为Mocha，1995年9月在Netscape Navigator 2.0的Beta版中改名为LiveScript，同年12月，Netscape Navigator 2.0 Beta 3中部署时被重命名为JavaScript，当时网景公司与昇阳电脑公司组成的开发联盟为了让这门语言搭上Java这个编程语言“热词”，因此将其临时改名为JavaScript，日后这成为大众对这门语言有诸多误解的原因之一。
2.微软采纳 微软公司于1995年首次推出Internet Explorer，从而引发了与Netscape的浏览器大战。微软对Netscape Navigator解释器进行了逆向工程，创建了JScript，以与处于市场领导地位的网景产品同台竞争。JScript也是一种JavaScript实现，这两个JavaScript语言版本在浏览器端共存意味着语言标准化的缺失，发展初期，JavaScript的标准并未确定，同期有网景的JavaScript，微软的JScript双峰并峙。除此之外，微软也在网页技术上加入了不少专属对象，使不少网页使用非微软平台及浏览器无法正常显示，导致在浏览器大战期间网页设计者通常会把“用Netscape可达到最佳效果”或“用IE可达到最佳效果”的标志放在主页。
3.标准化 1996年11月，网景正式向ECMA（欧洲计算机制造商协会）提交语言标准。1997年6月，ECMA以JavaScript语言为基础制定了ECMAScript标准规范ECMA-262。JavaScript成为了ECMAScript最著名的实现之一。除此之外，ActionScript和JScript也都是ECMAScript规范的实现语言。尽管JavaScript作为给非程序人员的脚本语言，而非作为给程序人员的脚本语言来推广和宣传，但是JavaScript具有非常丰富的特性。
JavaScript的诞生 1995年，当时的网景公司正凭借其Navigator浏览器成为Web时代开启时最著名的第一代互联网公司，同时也遇到了一个特别严重的问题，就是浏览器不具备与访问者互动的能力，所以当时网景公司就雇用了JS之父Brendan Eich来设计一个脚本语言来实现这个功能，由于当时Brendan Eich对这个语言不是很感兴趣，所以只花了10天出了一个设计稿应付公司，也导致了很长一段时间内，JavaScript代码十分混乱，不够严谨。在1995年，Sun公司将Oak语言改名为Java，正式向市场推出，Java推出时，Sun公司曾许诺语言可以&amp;quot;一次编写，到处运行&amp;quot;，所以当时网景公司就心动了，希望借Java的名气来推广这个新脚本，所以取名为JavaScript，但事实上JavaScript除了语法上有点像Java，其他部分基本上没啥关系，实际上它的语法风格与Self及Scheme较为接近。JavaScript的创建于1995年，但是在10年的时间内，发展也十分缓慢。它真正的兴起是由于谷歌邮件，即我们熟知的Gmail面世。它很可能是第一个将JavaScript提升到另一个高度的应用。Gmail用JavaScript来动态提取你在在浏览器中查看的内容。原本你需要在点击收信箱内的邮件后等待新的网页加载，但现在谷歌在背景使用JavaScript捕捉你想要浏览的内容然后呈现给你。再也不需要等待一整个新网页加载了，让用户和开发者眼前一亮，在这时，JavaScript开始兴起了。 JavaScript设计缺陷和优点 为什么JavaScript会有设计缺陷 设计阶段过于仓促。Javascript的设计，其实只用了十天。而且，设计师是为了向公司交差，本人并不愿意这样设计。另一方面，这种语言的设计初衷，是为了解决一些简单的网页互动（比如，检查&amp;quot;用户名&amp;quot;是否填写），并没有考虑复杂应用的需要。 没有先例。Javascript同时结合了函数式编程和面向对象编程的特点，这很可能是历史上的第一例。而且直到今天为止，Javascript仍然是世界上唯一使用Prototype继承模型的主要语言。这使得它没有设计先例可以参考。 过早标准化。为了压制微软，网景公司决定申请Javascript的国际标准；1997年6月，第一个国际标准ECMA-262正式颁布。Javascript推出一年半之后，国际标准就问世了。设计缺陷还没有充分暴露就成了标准。相比之下，C语言问世将近20年之后，国际标准才颁布。 JavaScript的设计缺陷 由于JS的流行以及JS是一种客户端语言，黑客和其他恶意第三方就会有额外的动机去寻找漏洞和安全漏洞，容易受到攻击。在JS设计上的问题，以下列出了几点: 1.不适合开发大型程序; 2.非常小的标准库; 3.null和undefined; 4.全局变量难以控制; 5.自动插入行尾分号; 6.加号运算符; 7.NaN; 8.数组和对象的区分; 9.==和===; 10.基本类型的包装对象. JavaScript的优点 JavaScript是一种属于网络的高级脚本语言,已经被广泛用于Web应用开发,常用来为网页添加各式各样的动态功能,为用户提供更流畅美观的浏览效果。通常JavaScript脚本是通过嵌入在HTML中来实现自身的功能的。 </description>
    </item>
    
    <item>
      <title>URL</title>
      <link>https://delta5738.github.io/post/url/</link>
      <pubDate>Sun, 14 Aug 2022 20:03:39 +0900</pubDate>
      
      <guid>https://delta5738.github.io/post/url/</guid>
      <description>IP地址 IP地址有两个主要的功能： 1.标识主机：更具体地说，标识其网络接口，并且提供主机在网络中的位置。 2.网络寻址：网际协议（缩写：IP）的一个重要机制就是网络寻址（英语：internet address）。该功能的目的是将数据报从一个网络模块送到目的地。在发送的整个过程，IP地址（address）充当着目的地的位置，域名（name）意味着我们要找什么，路由（route）代表着如何到达目的地的这个过程。 IP地址是在主机加入网络时动态分配的，还是通过主机硬件/软件的配置永久分配给主机的。永久性的配置也称为使用静态IP地址。相反，在每次重新启动时分配的IP地址，称为使用动态IP地址。 几个特殊IP:127.0.0.1表示自己;localhost通过hosts指定为自己;0.0.0.0不表示任何设备 一个域名可以对应不同IP(负载均衡) 一个IP可以对应不同域名(共享主机) 域名通过DNS解析 端口 一台机器可以提供很多服务,每一个服务都有一个端口号,叫port 0-1023端口是留给系统使用的,只有拥有管理员权限才能使用这些端口 其他端口可以给普通用户使用 一个端口如果被占用,就换一个端口 IP和端口缺一不可 一些特殊端口,比如80(HTTP)443(HTTPS)等 URL URL,简称网址，是因特网上标准的资源的地址（Address），如同在网络上的门牌。 的统一资源定位符将从因特网获取信息的五个基本元素包括在一个简单的地址中： 1.传送协议 2.层级URL标记符号（为“//”，固定不变） 3.访问资源需要的凭证信息（可省略） 4.服务器（通常为域名，有时为IP地址） 5.端口号（以数字方式表示，若为默认值可省略） 6.路径（以“/”字符区别路径中的每一个目录名称） 7.查询参数（GET模式的窗体参数，以“?”字符为起点，每个参数以“&amp;amp;”隔开，再以“=”分开参数名称与资料，通常以UTF-8的URL编码，避开字符冲突的问题） 8.锚点（以“#”字符为起点） </description>
    </item>
    
    <item>
      <title>浏览器渲染原理,CSS的transition 和 animation</title>
      <link>https://delta5738.github.io/post/css/</link>
      <pubDate>Sun, 14 Aug 2022 01:03:39 +0900</pubDate>
      
      <guid>https://delta5738.github.io/post/css/</guid>
      <description>浏览器渲染原理 渲染流程有四个主要步骤： 1:解析HTML生成DOM树 - 渲染引擎首先解析HTML文档，生成DOM树; 2:构建Render树 - 接下来不管是内联式，外联式还是嵌入式引入的CSS样式会被解析生成CSSOM树，根据DOM树与CSSOM树生成;另外一棵用于渲染的树-渲染树(Render tree); 3:布局Render树 - 然后对渲染树的每个节点进行布局处理，确定其在屏幕上的显示位置; 4:绘制Render树 - 最后遍历渲染树并用UI后端层将每一个节点绘制出来; 浏览器渲染有三种更新方式: 1:JS/CSS&amp;gt;样式&amp;gt;布局&amp;gt;绘制&amp;gt;合成; 2:JS/CSS&amp;gt;样式&amp;gt;绘制&amp;gt;合成; 3:JS/CSS&amp;gt;样式&amp;gt;合成; CSS 动画的两种做法（transition 和 animation） transform 4个常用功能: 位移translate 缩放scale 选择rotate 倾斜skew 一般都需要配合trasition过度 inline元素不支持transform,需要先变成block transition过渡 作用是补充中间帧 并不是所有属性都能过渡:比如display:none=&amp;gt;block,一般改成visibility:hidden=&amp;gt;visible; CSS动画使用两次transform,实现动画:.a&amp;gt;transform&amp;gt;.b;然后.b&amp;gt;transform&amp;gt;.c 用setTimeout或者监听transitionend事件 详细用法搜索MDN animation 使用animation要声明关键帧 添加动画 使用forward让动画停在最后一帧 keyframes详细用法搜索MDN keyframes </description>
    </item>
    
    <item>
      <title>CSS盒模型</title>
      <link>https://delta5738.github.io/post/css_boxmodel01/</link>
      <pubDate>Fri, 15 Jul 2022 01:03:39 +0900</pubDate>
      
      <guid>https://delta5738.github.io/post/css_boxmodel01/</guid>
      <description>CSS盒模型基本概念 当对一个文档进行布局的时候，浏览器的渲染引擎会根据标准之一的 CSS 基础框盒模型 所有元素表示为一个个矩形的盒子（box）。CSS 决定这些盒子的大小、位置以及属性（例如颜色、背景、边框尺寸…） 每个盒子由四个部分组成，内容边界 Content edge、内边距边界 Padding Edge、边框边界 Border Edge、外边框边界 Margin Edge 盒模型包括两种1:border-box;2:content-box border-box宽度包含整个border,padding,content,margin,border是整个BOX的边界(好用一些) content-box宽度只包括整个content,content是整个BOX的边界 没有指定padding或者宽度,则两者差别不大 display:inline_block可以取消margin合并 CSS是不正交的,属性之间会互相影响 第一个子元素和最后一个子元素,上下会和父元素外边距合并 overflow 溢出 内容宽度或者高度大于容器的,会溢出 可用overflow设置是否显示滚动条 auto是灵活设置 scroll是永远显示 hidden是隐藏溢出部分 visible是显示溢出部分 overflow可以分为overflow-x和overflow-y margin合并 父子margin合并 兄弟margin合并 如何阻止合并 父子合并用padding/border挡住 父子合并用overflow:hidden挡住 父子合并用display:flex挡住 兄弟合并是符合预期的 兄弟合并可以用inline-block消除 </description>
    </item>
    
    <item>
      <title>HTML入门笔记1</title>
      <link>https://delta5738.github.io/post/html-markup-1/</link>
      <pubDate>Mon, 04 Jul 2022 01:03:39 +0900</pubDate>
      
      <guid>https://delta5738.github.io/post/html-markup-1/</guid>
      <description>&lt;h2 id=&#34;html发明者&#34;&gt;HTML发明者&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;1980年，物理学家蒂姆·伯纳斯-李在欧洲核子研究中心（CERN）在承包工程期间，为使CERN的研究人员使用并共享文档，他提出并创建原型系统ENQUIRE。1989年，伯纳斯-李在一份备忘录中提出一个基于互联网的超文本系统[5]。他规定HTML并在1990年底写出浏览器和服务器软件。同年，伯纳斯-李与CERN的数据系统工程师罗伯特·卡里奥联合为项目申请资助，但未被CERN正式批准。在他的个人笔记中[6]伯纳斯-李列举“一些使用超文本的领域”，并把百科全书列为首位[7]。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://zh.m.wikipedia.org/zh/HTML&#34;&gt;https://zh.m.wikipedia.org/zh/HTML&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;html常用标签1&#34;&gt;HTML常用标签(1)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;!-- raw HTML omitted --&gt;&amp;lt;!DOCTYPE&amp;gt; &lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;!DOCTYPE标签应该位于html文档最前,处于HTML标签之前,它来告知浏览器使用了哪种HTML版本&lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;&amp;lt;html&amp;gt;  &lt;!-- raw HTML omitted --&gt;
html表示一个 HTML 文档的根（顶级元素），所以它也被称为根元素。所有其他元素必须是此元素的后代。&lt;/li&gt;
&lt;li&gt;&amp;lt;head&amp;gt; &lt;!-- raw HTML omitted --&gt;
head标签规定文档相关配置信息元数据（Metadata）,包括文档标题,引用的文档样式等&lt;/li&gt;
&lt;li&gt;&amp;lt;meta&amp;gt; &lt;!-- raw HTML omitted --&gt;
meta标签用来表示HTML元数据的属性,如name,字符集等&lt;/li&gt;
&lt;li&gt;&amp;lt;title&amp;gt;&lt;!-- raw HTML omitted --&gt;
title标签定义文档的标题，显示在Browser的标题栏或标签页上。它只应该包含文本，若是包含有标签，则它包含的任何标签都将被忽略&lt;/li&gt;
&lt;li&gt;&amp;lt;style&amp;gt;&lt;!-- raw HTML omitted --&gt;
style标签元素包含文档的样式信息或者文档的部分内容&lt;/li&gt;
&lt;li&gt;&amp;lt;body&amp;gt;&lt;!-- raw HTML omitted --&gt;
body标签表示文档的内容&lt;/li&gt;
&lt;li&gt;&amp;lt;header&amp;gt;&lt;!-- raw HTML omitted --&gt;
header标签用于展示介绍性内容，通常包含一组介绍性的或是辅助导航的实用元素。它可能包含一些标题元素，但也可能包含其他元素，比如 Logo、搜索框、作者名称等&lt;/li&gt;
&lt;li&gt;&amp;lt;div&amp;gt;&lt;!-- raw HTML omitted --&gt;
div标签是一个内容容器,在不使用CSS的情况下，其对内容或布局没有任何影响&lt;/li&gt;
&lt;li&gt;&amp;lt;main&amp;gt;&lt;!-- raw HTML omitted --&gt;
main标签呈现了文档的body或应用的主体部分。主体部分由与文档直接相关，或者扩展于文档的中心主题、应用的主要功能部分的内容组成&lt;/li&gt;
&lt;li&gt;&amp;lt;section&amp;gt;&lt;!-- raw HTML omitted --&gt;
section标签表示一个包含在 HTML 文档中的独立部分，它没有更具体的语义元素来表示，一般来说会有包含一个标题&lt;/li&gt;
&lt;li&gt;&amp;lt;h1-h6&amp;gt;&lt;!-- raw HTML omitted --&gt;
h1-h6标签 (Heading) 呈现了六个不同的级别的标题，h1 级别最高，而 h6级别最低&lt;/li&gt;
&lt;li&gt;&amp;lt;p&amp;gt;&lt;!-- raw HTML omitted --&gt;
p标签表示文本的一个段落&lt;/li&gt;
&lt;li&gt;&amp;lt;ul&amp;gt;&lt;!-- raw HTML omitted --&gt;
ul标签表示一个内可含多个元素的无序列表或项目符号列表&lt;/li&gt;
&lt;li&gt;&amp;lt;li&amp;gt;&lt;!-- raw HTML omitted --&gt;
li标签用于表示列表里的条目。它必须包含在一个父元素里：一个有序列表 (ol)，一个无序列表 (ul)，或者一个菜单 (menu)。在菜单或者无序列表里，列表条目通常用点排列显示；在有序列表里，列表条目通常在左边显示按升序排列的计数&lt;/li&gt;
&lt;li&gt;&amp;lt;dl&amp;gt;&lt;!-- raw HTML omitted --&gt;
dl标签是一个包含术语定义以及描述的列表&lt;/li&gt;
&lt;li&gt;&amp;lt;pre&amp;gt;&lt;!-- raw HTML omitted --&gt;
pre标签表示预定义格式文本。在该元素中的文本通常按照原文件中的编排，以等宽字体的形式展现出来，文本中的空白符（比如空格和换行符）都会显示出来。(紧跟在pre开始标签后的换行符也会被省略)&lt;/li&gt;
&lt;li&gt;&amp;lt;code&amp;gt;&lt;!-- raw HTML omitted --&gt;
code标签呈现一段计算机代码。默认情况下，它以浏览器的默认等宽字体显示&lt;/li&gt;
&lt;li&gt;&amp;lt;em&amp;gt;&lt;!-- raw HTML omitted --&gt;
em标签标记出需要用户着重阅读的内容&lt;/li&gt;
&lt;li&gt;&amp;lt;strong&amp;gt;&lt;!-- raw HTML omitted --&gt;
strong标签表示文本十分重要，一般用粗体显示&lt;/li&gt;
&lt;li&gt;&amp;lt;quote&amp;gt;&lt;!-- raw HTML omitted --&gt;
quote标签用于设置引号的样式&lt;/li&gt;
&lt;li&gt;&amp;lt;aside&amp;gt;&lt;!-- raw HTML omitted --&gt;
aside标签表示一个和其余页面内容几乎无关的部分，被认为是独立于该内容的一部分并且可以被单独的拆分出来而不会使整体受影响,其通常表现为侧边栏或者标注框&lt;/li&gt;
&lt;li&gt;&amp;lt;footer&amp;gt;&lt;!-- raw HTML omitted --&gt;
footer标签表示最近一个章节内容或者根节点（sectioning root ）元素的页脚。一个页脚通常包含该章节作者、版权数据或者与文档相关的链接等信息&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>HTML标签学习2</title>
      <link>https://delta5738.github.io/post/html-markup-2/</link>
      <pubDate>Sat, 02 Jul 2022 01:04:12 +0900</pubDate>
      
      <guid>https://delta5738.github.io/post/html-markup-2/</guid>
      <description>&lt;h2 id=&#34;难点1&#34;&gt;难点1&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&amp;lt;a&amp;gt; href&lt;!-- raw HTML omitted --&gt;
a标签可以通过它的 href 属性创建通向其他网页、文件、同一页面内的位置、电子邮件地址或任何其他 URL 的超链接;&lt;!-- raw HTML omitted --&gt;
download属性,此属性指示浏览器下载 URL 而不是导航到它，因此将提示用户将其保存为本地文件;&lt;!-- raw HTML omitted --&gt;
也可以执行JS伪协议,有时候会用来做一个点击之后没有动作的a标签;&lt;!-- raw HTML omitted --&gt;
加入#id,可以查看指定内容;&lt;!-- raw HTML omitted --&gt;
a href=&amp;ldquo;mailto:XXX&amp;quot;可以发邮件到XXX邮箱;&lt;!-- raw HTML omitted --&gt;
a href=&amp;ldquo;tel:XXX&amp;quot;可以打电话到指定号码;&lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;难点2&#34;&gt;难点2&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&amp;lt;a&amp;gt; target&lt;!-- raw HTML omitted --&gt;
a标签的target属性指定在何处显示链接的资源:&lt;!-- raw HTML omitted --&gt;
target=&amp;quot;_self&amp;rdquo;: 当前页面加载&lt;!-- raw HTML omitted --&gt;
target=&amp;quot;_blank&amp;rdquo;: 新窗口打开&lt;!-- raw HTML omitted --&gt;
target=&amp;quot;_parent&amp;quot;: 在当前链接框架上一级标签打开页面&lt;!-- raw HTML omitted --&gt;
target=&amp;quot;_top&amp;quot;: 在顶级窗口打开页面&lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;难点3&#34;&gt;难点3&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&amp;lt;iframe&amp;gt;内嵌窗口,但是已经很少用了 &lt;!-- raw HTML omitted --&gt;
name属性用于定位嵌入的浏览上下文的名称。该名称可以用作 a标签与 form标签的 target 属性值，还可以用作 window.open() 方法的 windowName 参数值&lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;难点4&#34;&gt;难点4&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&amp;lt;table&amp;gt;&lt;!-- raw HTML omitted --&gt;
table标签表示表格数据 — 即通过二维数据表表示的信息&lt;!-- raw HTML omitted --&gt;
table标签只能含有3个元素thead,tbody,tfoot以及&lt;!-- raw HTML omitted --&gt;
&amp;lt;th&amp;gt;元素定义表格内的表头单元格&lt;!-- raw HTML omitted --&gt;
&amp;lt;td&amp;gt;元素定义了一个包含数据的表格单元格&lt;!-- raw HTML omitted --&gt;
如果没写thead,tbody,tfoot,只写了th和td,浏览器补全thead,tbody,tfoot&lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;table-layout CSS 属性定义了用于布局表格单元格，行和列的算法&lt;!-- raw HTML omitted --&gt;
table-layout: fixed表格行和列的宽度通过表格的宽度来设置，某一列的宽度仅由该列首行的单元格决定。在当前列中，该单元格所在行之后的行并不会影响整个列宽;&lt;!-- raw HTML omitted --&gt;
auto:大多数浏览器采用自动表格布局算法对表格布局。表格及单元格的宽度取决于其包含的内容。&lt;!-- raw HTML omitted --&gt;
border-collapse CSS 属性是用来决定表格的边框是分开的还是合并的。在分隔模式下，相邻的单元格都拥有独立的边框。&lt;!-- raw HTML omitted --&gt;在合并模式下，相邻单元格共享边框。&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;难点5&#34;&gt;难点5&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&amp;lt;img&amp;gt;&lt;!-- raw HTML omitted --&gt;
img标签将一份图像嵌入文档,它发出一个GET请求,展示一张图片.&lt;!-- raw HTML omitted --&gt;
src 属性是必须的，它包含了你想嵌入的图片的文件路径&lt;!-- raw HTML omitted --&gt;
alt 属性如果由于某种原因无法加载图像，普通浏览器也会在页面上显示alt 属性中的备用文本：例如，网络错误、内容被屏蔽或链接过期时。&lt;!-- raw HTML omitted --&gt;
例子:&amp;lt;img&amp;gt;&amp;lt; class=&amp;ldquo;fit-picture&amp;rdquo;
src=&amp;quot;/media/cc0-images/grapefruit-slice-332-332.jpg&amp;quot;
alt=&amp;ldquo;图形加载失败&amp;rdquo;&amp;gt;&lt;!-- raw HTML omitted --&gt;
height属性指定图像高度,单位是CSS像素&lt;!-- raw HTML omitted --&gt;
width属性指定图像宽度,单位是CSS像素&lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;&lt;!-- raw HTML omitted --&gt;注意!永远不要让图片变形&lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;onerror事件,用来替代出错时的图&lt;/li&gt;
&lt;li&gt;响应式:max-width 属性用来给元素设置最大宽度值。定义了 max-width 的元素会在达到 max-width 值之后避免进一步按照 width 属性设置变大。(手机页面适用)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;难点6-表单&#34;&gt;难点6 表单&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&amp;lt;form&amp;gt;&lt;!-- raw HTML omitted --&gt;
form标签表示文档中的一个区域，此区域包含交互控件，用于向 Web 服务器提交信息。&lt;!-- raw HTML omitted --&gt;
action属性处理表单提交的 URL;&lt;!-- raw HTML omitted --&gt;
method属性浏览器使用这种 HTTP 方式来提交表单,可能的有;POST;GET等&lt;!-- raw HTML omitted --&gt;
autocomplete属性用于指示 input 元素是否能够拥有一个默认值，此默认值是由浏览器自动补全的。&lt;!-- raw HTML omitted --&gt;
target属性表示在提交表单之后，在哪里显示响应信息。&lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;&amp;lt;input&amp;gt;&lt;!-- raw HTML omitted --&gt;
input标签用于为基于 Web 的表单创建交互式控件，以便接受来自用户的数据; 里面最好不要有任何数据和标签&lt;/li&gt;
&lt;li&gt;&amp;lt;button&amp;gt;&lt;!-- raw HTML omitted --&gt;
button标签表示一个可点击的按钮，可以用在表单或文档其它需要使用简单标准按钮的地方。里面可以含有标签和数据;&lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;input type 还可以是text,color,password,radio,checkbox(可以name来确定是否是一组的),file(用multiple多选文件),hidden(一般用来给机器输入)等&lt;/li&gt;
&lt;li&gt;textarea标签表示一个多行纯文本编辑控件，当你希望用户输入一段相当长的、不限格式的文本，例如评论或反馈表单中的一段意见时，这很有用。&lt;/li&gt;
&lt;li&gt;select标签表示一个提供选项菜单的控件&lt;/li&gt;
&lt;li&gt;onchange用户输入改变的时候触发的事件;onfocus事件是用户鼠标集中到身上的时候触发的事件;onblur是用户鼠标出来的时候触发的事件&lt;/li&gt;
&lt;li&gt;HTML5有自带验证器&lt;/li&gt;
&lt;li&gt;注意:1.一般不监听input的click事件;2.input都要有name属性;3.&lt;!-- raw HTML omitted --&gt;一个表单必须含有type=&amp;ldquo;submit&amp;quot;表单才可以提交;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title> jQuery功能01</title>
      <link>https://delta5738.github.io/post/jquery%E5%8A%9F%E8%83%BD1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://delta5738.github.io/post/jquery%E5%8A%9F%E8%83%BD1/</guid>
      <description>jQuery 如何获取元素 要使用 jQuery 获取元素，可以使用 $() 或 jQuery() 函数，将 CSS 选择器作为参数传递进去，以获取满足选择器条件的元素。例如： var elements = $(&amp;#34;.example&amp;#34;); 这将返回一个 jQuery 对象，其中包含所有满足条件的元素。可以通过该对象上的各种方法和属性来操作这些元素。例如：
var text = $(&amp;#34;.example&amp;#34;).addclass(&amp;#34;red&amp;#34;).find(&amp;#34;.example&amp;#34;); jQuery 的链式操作是怎样的 jQuery 的链式操作是一种将多个 jQuery 方法链接在一起的技术，以便在同一行代码中对同一组元素进行多个操作。 链式操作的基本原理是，每个 jQuery 方法都返回一个 jQuery 对象，该对象可以继续调用其他 jQuery 方法。例如: $(&amp;#34;#Element&amp;#34;).addClass(&amp;#34;red&amp;#34;).css(&amp;#34;color&amp;#34;, &amp;#34;green&amp;#34;).show(); jQuery 如何创建元素 要使用 jQuery 创建新的元素，可以使用 $() 函数，将 HTML 标记作为参数传递进去，以创建一个新的 jQuery 对象。例如: var div1 = $(&amp;#34;&amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;&amp;#34;); jQuery 如何移动元素 要使用 jQuery 移动元素，可以使用它的一些 DOM 操作方法，例如 detach()、append()等。这些方法可以将元素从一个位置移动到另一个位置。 jQuery 如何修改元素的属性 使用 jQuery 修改元素的属性，可以使用 attr() 方法。这个方法可以设置或获取元素的属性值。例如: $(&amp;#34;#element&amp;#34;).attr(&amp;#34;title&amp;#34;, &amp;#34;New Title&amp;#34;); 这将将该元素的 title 属性设置为 &amp;ldquo;New Title&amp;rdquo;</description>
    </item>
    
    <item>
      <title>dom事件与事件委托</title>
      <link>https://delta5738.github.io/post/dom%E4%BA%8B%E4%BB%B6/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://delta5738.github.io/post/dom%E4%BA%8B%E4%BB%B6/</guid>
      <description>DOM事件里捕获和冒泡 在DOM事件中，捕获和冒泡是事件传播的两个阶段。事件从文档根节点开始传播，经过事件目标元素，最终到达文档根节点。在这个过程中，事件可以通过两个不同的传播阶段，即捕获阶段和冒泡阶段 从外向内找监听函数,叫事件捕获 从内向外找监听函数,叫事件冒泡 W3C的事件模型规定先捕获再冒泡 捕获阶段,事件从文档根节点开始向下传播，直到达到事件目标元素的祖先元素。这意味着，在事件目标元素上注册的捕获事件处理程序将首先被调用，而在祖先元素上注册的捕获事件处理程序将按顺序依次调用 冒泡阶段，事件从事件目标元素开始向上冒泡，直到达到文档根节点。这意味着，在事件目标元素上注册的冒泡事件处理程序将最后被调用，而在祖先元素上注册的冒泡事件处理程序将按照相反的顺序依次调用 在DOM事件中，可以使用addEventListener()方法来注册事件处理程序，该方法可以接受一个可选的布尔值参数useCapture，用于指定事件处理程序是在捕获阶段还是冒泡阶段调用 如果将useCapture设置为true，则事件处理程序将在捕获阶段被调用，如果将其设置为false，则事件处理程序将在冒泡阶段被调用。如果未提供该参数，则默认为false，即事件处理程序将在冒泡阶段被调用 DOM事件委托 DOM事件委托，它利用事件冒泡机制，在父元素上注册事件处理程序，以代理处理子元素的事件 通常情况下，如果需要处理多个相同类型的子元素的事件时，比如给多个按钮添加点击事件，需要分别获取每个子元素，并为它们分别添加事件监听器。这样做的问题在于，每个子元素都需要注册一个事件处理程序，当子元素的数量增多时，处理程序的数量也会增加，这会占用大量内存，造成性能问题 使用DOM事件委托，可以将事件处理程序注册在父元素上，当子元素触发事件时，事件会沿着DOM树向上传播，被父元素所捕获。然后可以使用事件对象中的属性来判断具体是哪个子元素触发了事件，并执行相应的处理逻辑。这种方式可以减少事件处理程序的数量，提高代码的性能和可维护性 </description>
    </item>
    
  </channel>
</rss>
